import React, { useState, useRef } from 'react'
import { createPortal } from 'react-dom'
import ScoreBadge from './ScoreBadge.jsx'
import ResultCard from './ResultCard.jsx'

const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:5050';

export default function SeoForm({ user, token, requireAuth }) {
  const [url, setUrl] = useState('https://example.com')
  const [loading, setLoading] = useState(false)
  const [data, setData] = useState(null)
  const [error, setError] = useState('')
  const [openTooltip, setOpenTooltip] = useState(null)
  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 })
  const [showDownloadOptions, setShowDownloadOptions] = useState(false)
  const buttonRefs = useRef({})

  const onSubmit = async (e) => {
    e.preventDefault()
    
    if (!requireAuth()) {
      return
    }
    
    setLoading(true); setError(''); setData(null)
    try {
      const headers = {
        'Authorization': `Bearer ${token}`
      }
      const res = await fetch(`${API_BASE}/api/analyze?url=` + encodeURIComponent(url), { headers })
      const json = await res.json()
      if (!res.ok) {
        if (res.status === 401) {
          setError('Please login to analyze websites')
          return
        }
        if (res.status === 429) {
          setError(json.message || 'Daily limit reached. Upgrade to Pro for unlimited access.')
          return
        }
        throw new Error(json.error || 'Failed')
      }
      setData(json)
    } catch (err) {
      setError(err.message || 'Request failed')
    } finally {
      setLoading(false)
    }
  }

  const handleFixClick = (index, e) => {
    e.stopPropagation()
    
    if (openTooltip === index) {
      setOpenTooltip(null)
    } else {
      const rect = e.currentTarget.getBoundingClientRect()
      const tooltipWidth = 320
      const tooltipHeight = 200
      
      // Position above and to the left of button
      let x = rect.right - tooltipWidth
      let y = rect.top - tooltipHeight - 12
      
      // Adjust if off screen
      if (y < 10) y = rect.bottom + 12
      if (x < 10) x = 10
      if (x + tooltipWidth > window.innerWidth - 10) {
        x = window.innerWidth - tooltipWidth - 10
      }
      
      setTooltipPosition({ x, y })
      setOpenTooltip(index)
    }
  }

  // Download SEO Report in different formats
  const downloadSEOReport = (data, url, format = 'txt') => {
    const timestamp = new Date().toLocaleString()
    const domain = new URL(url).hostname
    
    if (format === 'json') {
      downloadAsJSON(data, url, domain)
      return
    }
    
    if (format === 'csv') {
      downloadAsCSV(data, url, domain)
      return
    }
    
    // Default: Text format
    downloadAsText(data, url, domain, timestamp)
  }

  const downloadAsText = (data, url, domain, timestamp) => {
    const reportContent = `
SEO ANALYSIS REPORT
====================

Website: ${url}
Domain: ${domain}
Analysis Date: ${timestamp}
Generated by: Website Scanner

OVERALL SCORE
=============
SEO Score: ${data.score}/100
Status: ${data.status}
Response Time: ${data.ttfbMs} ms
Word Count: ${data.wordCount}

BASIC INFORMATION
=================
Title: ${data.metrics.title || 'Missing'}
Meta Description: ${data.metrics.metaDescription || 'Missing'}
Viewport Meta Tag: ${data.metrics.viewport || 'Missing'}
Language: ${data.metrics.lang || 'Missing'}
Canonical URL: ${data.metrics.canonical || 'Missing'}

CONTENT ANALYSIS
================
H1 Count: ${data.metrics.h1Count}
Total Images: ${data.metrics.imgCount}
Images Missing Alt Text: ${data.metrics.imgsMissingAlt}
JSON-LD Blocks: ${data.metrics.jsonLdCount}

SOCIAL MEDIA / SHARING
======================
Open Graph Title: ${data.metrics.og.title || 'Missing'}
Open Graph Description: ${data.metrics.og.description || 'Missing'}
Twitter Card: ${data.metrics.twitterCard || 'Missing'}

LINK ANALYSIS
=============
Total Links: ${data.metrics.linkTotals.total}
Internal Links: ${data.metrics.linkTotals.internal}
External Links: ${data.metrics.linkTotals.external}

${data.issues && data.issues.length > 0 ? `
PRIORITY FIXES
==============
${data.issues.map((issue, i) => `${i + 1}. ${issue}`).join('\n')}
` : 'No critical issues found.'}

RECOMMENDATIONS
===============
${getRecommendations(data)}

---
Report generated by Website Scanner
For more detailed analysis, visit: ${window.location.origin}
`

    // Create and download the file
    const blob = new Blob([reportContent], { type: 'text/plain' })
    const downloadUrl = window.URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = downloadUrl
    link.download = `seo-report-${domain}-${new Date().getTime()}.txt`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    window.URL.revokeObjectURL(downloadUrl)
  }

  const downloadAsJSON = (data, url, domain) => {
    const reportData = {
      website: url,
      domain: domain,
      analysisDate: new Date().toISOString(),
      generatedBy: 'Website Scanner',
      seoScore: data.score,
      status: data.status,
      responseTime: data.ttfbMs,
      wordCount: data.wordCount,
      metrics: {
        basic: {
          title: data.metrics.title,
          metaDescription: data.metrics.metaDescription,
          viewport: data.metrics.viewport,
          language: data.metrics.lang,
          canonical: data.metrics.canonical
        },
        content: {
          h1Count: data.metrics.h1Count,
          totalImages: data.metrics.imgCount,
          imagesMissingAlt: data.metrics.imgsMissingAlt,
          jsonLdBlocks: data.metrics.jsonLdCount
        },
        social: {
          ogTitle: data.metrics.og.title,
          ogDescription: data.metrics.og.description,
          twitterCard: data.metrics.twitterCard
        },
        links: {
          total: data.metrics.linkTotals.total,
          internal: data.metrics.linkTotals.internal,
          external: data.metrics.linkTotals.external
        }
      },
      issues: data.issues || [],
      recommendations: getRecommendationsArray(data)
    }

    const blob = new Blob([JSON.stringify(reportData, null, 2)], { type: 'application/json' })
    const downloadUrl = window.URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = downloadUrl
    link.download = `seo-report-${domain}-${new Date().getTime()}.json`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    window.URL.revokeObjectURL(downloadUrl)
  }

  const downloadAsCSV = (data, url, domain) => {
    const csvData = [
      ['Metric', 'Value'],
      ['Website', url],
      ['Domain', domain],
      ['Analysis Date', new Date().toLocaleString()],
      ['SEO Score', data.score],
      ['Status', data.status],
      ['Response Time (ms)', data.ttfbMs],
      ['Word Count', data.wordCount],
      ['', ''],
      ['BASIC INFORMATION', ''],
      ['Title', data.metrics.title || 'Missing'],
      ['Meta Description', data.metrics.metaDescription || 'Missing'],
      ['Viewport', data.metrics.viewport || 'Missing'],
      ['Language', data.metrics.lang || 'Missing'],
      ['Canonical URL', data.metrics.canonical || 'Missing'],
      ['', ''],
      ['CONTENT ANALYSIS', ''],
      ['H1 Count', data.metrics.h1Count],
      ['Total Images', data.metrics.imgCount],
      ['Images Missing Alt', data.metrics.imgsMissingAlt],
      ['JSON-LD Blocks', data.metrics.jsonLdCount],
      ['', ''],
      ['SOCIAL MEDIA', ''],
      ['OG Title', data.metrics.og.title || 'Missing'],
      ['OG Description', data.metrics.og.description || 'Missing'],
      ['Twitter Card', data.metrics.twitterCard || 'Missing'],
      ['', ''],
      ['LINKS', ''],
      ['Total Links', data.metrics.linkTotals.total],
      ['Internal Links', data.metrics.linkTotals.internal],
      ['External Links', data.metrics.linkTotals.external]
    ]

    if (data.issues && data.issues.length > 0) {
      csvData.push(['', ''])
      csvData.push(['ISSUES', ''])
      data.issues.forEach((issue, i) => {
        csvData.push([`Issue ${i + 1}`, issue])
      })
    }

    const csvContent = csvData.map(row => 
      row.map(cell => `"${String(cell).replace(/"/g, '""')}"`).join(',')
    ).join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv' })
    const downloadUrl = window.URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = downloadUrl
    link.download = `seo-report-${domain}-${new Date().getTime()}.csv`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    window.URL.revokeObjectURL(downloadUrl)
  }

  const getRecommendationsArray = (data) => {
    const recommendations = []
    
    if (!data.metrics.title) recommendations.push('Add a descriptive page title (50-60 characters)')
    if (!data.metrics.metaDescription) recommendations.push('Add a compelling meta description (150-160 characters)')
    if (data.metrics.h1Count === 0) recommendations.push('Add exactly one H1 heading to the page')
    else if (data.metrics.h1Count > 1) recommendations.push('Use only one H1 heading per page')
    if (data.metrics.imgsMissingAlt > 0) recommendations.push(`Add alt text to ${data.metrics.imgsMissingAlt} images`)
    if (!data.metrics.viewport) recommendations.push('Add viewport meta tag for mobile optimization')
    if (!data.metrics.canonical) recommendations.push('Add canonical URL to prevent duplicate content issues')
    if (!data.metrics.og.title) recommendations.push('Add Open Graph title for better social media sharing')
    if (!data.metrics.og.description) recommendations.push('Add Open Graph description for social media previews')
    if (data.metrics.jsonLdCount === 0) recommendations.push('Consider adding structured data (JSON-LD) for better search visibility')
    if (data.score < 70) {
      recommendations.push('Focus on addressing the priority fixes listed above')
      recommendations.push('Consider hiring an SEO professional for comprehensive optimization')
    }
    
    if (recommendations.length === 0) {
      recommendations.push('Great job! Your website follows most SEO best practices.')
      recommendations.push('Consider regular monitoring and testing for ongoing optimization.')
    }
    
    return recommendations
  }

  // Generate recommendations based on analysis
  const getRecommendations = (data) => {
    const recommendations = []
    
    if (!data.metrics.title) {
      recommendations.push('• Add a descriptive page title (50-60 characters)')
    }
    
    if (!data.metrics.metaDescription) {
      recommendations.push('• Add a compelling meta description (150-160 characters)')
    }
    
    if (data.metrics.h1Count === 0) {
      recommendations.push('• Add exactly one H1 heading to the page')
    } else if (data.metrics.h1Count > 1) {
      recommendations.push('• Use only one H1 heading per page')
    }
    
    if (data.metrics.imgsMissingAlt > 0) {
      recommendations.push(`• Add alt text to ${data.metrics.imgsMissingAlt} images`)
    }
    
    if (!data.metrics.viewport) {
      recommendations.push('• Add viewport meta tag for mobile optimization')
    }
    
    if (!data.metrics.canonical) {
      recommendations.push('• Add canonical URL to prevent duplicate content issues')
    }
    
    if (!data.metrics.og.title) {
      recommendations.push('• Add Open Graph title for better social media sharing')
    }
    
    if (!data.metrics.og.description) {
      recommendations.push('• Add Open Graph description for social media previews')
    }
    
    if (data.metrics.jsonLdCount === 0) {
      recommendations.push('• Consider adding structured data (JSON-LD) for better search visibility')
    }
    
    if (data.score < 70) {
      recommendations.push('• Focus on addressing the priority fixes listed above')
      recommendations.push('• Consider hiring an SEO professional for comprehensive optimization')
    }
    
    if (recommendations.length === 0) {
      return 'Great job! Your website follows most SEO best practices.\nConsider regular monitoring and testing for ongoing optimization.'
    }
    
    return recommendations.join('\n')
  }

  // Close tooltip when clicking outside or scrolling
  React.useEffect(() => {
    const handleClickOutside = (e) => {
      // Don't close if clicking inside the tooltip
      if (e.target.closest('.fix-tooltip-portal')) {
        return
      }
      setOpenTooltip(null)
    }
    
    const handleScroll = () => {
      setOpenTooltip(null)
    }
    
    const handleEscape = (e) => {
      if (e.key === 'Escape') {
        setOpenTooltip(null)
      }
    }
    
    if (openTooltip !== null) {
      // Add click outside listener
      setTimeout(() => {
        document.addEventListener('click', handleClickOutside)
      }, 0)
      
      // Add scroll listener
      window.addEventListener('scroll', handleScroll, true) // Use capture to catch all scrolls
      document.addEventListener('scroll', handleScroll, true)
      
      // Add escape key listener
      document.addEventListener('keydown', handleEscape)
      
      return () => {
        document.removeEventListener('click', handleClickOutside)
        window.removeEventListener('scroll', handleScroll, true)
        document.removeEventListener('scroll', handleScroll, true)
        document.removeEventListener('keydown', handleEscape)
      }
    }
  }, [openTooltip])

  // Close download dropdown when clicking outside
  React.useEffect(() => {
    const handleClickOutside = (e) => {
      if (!e.target.closest('.download-dropdown')) {
        setShowDownloadOptions(false)
      }
    }

    if (showDownloadOptions) {
      setTimeout(() => {
        document.addEventListener('click', handleClickOutside)
      }, 0)
      
      return () => document.removeEventListener('click', handleClickOutside)
    }
  }, [showDownloadOptions])

  return (
    <>
    <section className="card">
      <h2>SEO Analyzer</h2>
      <p>Enter a URL. We’ll scan the HTML and compute a weighted 100-point SEO score.</p>
      <form onSubmit={onSubmit} className="form">
        <input value={url} onChange={e=>setUrl(e.target.value)} placeholder="https://yoursite.com" />
        <button disabled={loading}>{loading ? 'Scanning…' : 'Analyze'}</button>
      </form>

      {error && <div className="error">{error}</div>}
      {data && (
        <div className="results">
          <div className="results-header">
            <ScoreBadge score={data.score} label="SEO Score" />
            <div className="kv">
              <div><strong>Status:</strong> {data.status}</div>
              <div><strong>TTFB:</strong> {data.ttfbMs} ms</div>
              <div><strong>Words:</strong> {data.wordCount}</div>
            </div>
            <div className="download-section">
              <div className="download-dropdown">
                <button 
                  className="download-btn"
                  onClick={() => setShowDownloadOptions(!showDownloadOptions)}
                  title="Download SEO Report"
                >
                  <span className="download-icon">📄</span>
                  Download Report
                  <span className="dropdown-arrow">▼</span>
                </button>
                {showDownloadOptions && (
                  <div className="download-options">
                    <button 
                      className="download-option"
                      onClick={() => {
                        downloadSEOReport(data, url, 'txt')
                        setShowDownloadOptions(false)
                      }}
                    >
                      📄 Text Report (.txt)
                    </button>
                    <button 
                      className="download-option"
                      onClick={() => {
                        downloadSEOReport(data, url, 'json')
                        setShowDownloadOptions(false)
                      }}
                    >
                      📊 JSON Data (.json)
                    </button>
                    <button 
                      className="download-option"
                      onClick={() => {
                        downloadSEOReport(data, url, 'csv')
                        setShowDownloadOptions(false)
                      }}
                    >
                      📈 CSV Spreadsheet (.csv)
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
          <div className="grid">
            <ResultCard title="Basics" items={[
              ['Title', data.metrics.title || '—'],
              ['Meta Description', data.metrics.metaDescription || '—'],
              ['Viewport', data.metrics.viewport || '—'],
              ['Language', data.metrics.lang || '—'],
              ['Canonical URL', data.metrics.canonical || '—'],
            ]} />

            <ResultCard title="Content Structure" items={[
              ['H1 Count', String(data.metrics.h1Count)],
              ['Header Hierarchy', data.metrics.headerHierarchy?.isGood ? 'Good' : data.metrics.headerHierarchy?.issue || 'Issues'],
              ['Word Count', String(data.wordCount)],
              ['Images Total', String(data.metrics.imgCount)],
              ['Images Missing Alt', String(data.metrics.imgsMissingAlt)],
            ]} />

            <ResultCard title="Keywords & SEO" items={[
              ['Keywords in Title', data.metrics.keywordAnalysis?.titleHasKeywords ? 'Yes' : 'No'],
              ['Keywords in Description', data.metrics.keywordAnalysis?.descriptionHasKeywords ? 'Yes' : 'No'],
              ['JSON-LD Structured Data', String(data.metrics.jsonLdCount)],
              ['Robots Meta', data.metrics.robotsMeta || '—'],
            ]} />

            <ResultCard title="Technical SEO" items={[
              ['HTTPS', data.metrics.technical?.https ? 'Yes' : 'No'],
              ['Broken Links', `${data.metrics.technical?.brokenLinks?.brokenCount || 0} broken link${(data.metrics.technical?.brokenLinks?.brokenCount || 0) === 1 ? '' : 's'}`],
            ]} brokenLinks={data.metrics.technical?.brokenLinks?.brokenLinks || []} />

            <ResultCard title="Social & Sharing" items={[
              ['OG Title', data.metrics.og.title || '—'],
              ['OG Description', data.metrics.og.description || '—'],
              ['Twitter Card', data.metrics.twitterCard || '—'],
              ['Social Media Links', `${data.metrics.socialLinks?.count || 0} platforms`],
            ]} />

            <ResultCard title="Links & Navigation" items={[
              ['Total Links', String(data.metrics.linkTotals.total)],
              ['Internal Links', String(data.metrics.linkTotals.internal)],
              ['External Links', String(data.metrics.linkTotals.external)],
              ['Image Optimization', data.metrics.imageAnalysis?.optimized ? 'Good' : 'Needs Work'],
            ]} />
          </div>

          {data.issues?.length > 0 && (
            <div className="top-fixes-card">
              <div className="top-fixes-header">
                <div className="fix-icon">⚡</div>
                <div className="fix-header-content">
                  <h3>Top Priority Fixes</h3>
                  <p>Address these issues to improve your SEO score</p>
                </div>
                <div className="fixes-count">{data.issues.length}</div>
              </div>
              <div className="fixes-list">
                {data.issues.map((issue, i) => (
                    <div key={i} className="fix-item">
                      <div className="fix-priority">
                        <span className="priority-number">{i + 1}</span>
                      </div>
                      <div className="fix-content">
                        <div className="fix-text">{issue}</div>
                        <div className="fix-impact">High Impact</div>
                      </div>
                      <div className="fix-action">
                        <button 
                          className="fix-btn" 
                          onClick={(e) => handleFixClick(i, e)}
                          ref={el => buttonRefs.current[i] = el}
                        >
                          Fix
                        </button>
                      </div>
                    </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}
    </section>
    {/* Tooltip Portal */}
    {openTooltip !== null && data?.issues && createPortal(
      <div 
        className="fix-tooltip-portal"
        style={{
          position: 'fixed',
          top: tooltipPosition.y,
          left: tooltipPosition.x,
          zIndex: 10000
        }}
        onClick={(e) => e.stopPropagation()}
      >
        <div className="fix-tooltip-content">
          <div className="tooltip-header">
            <span className="tooltip-icon">💡</span>
            <h4>{(() => {
              const issue = data.issues[openTooltip]
              const fixInfo = getFixInstructions(issue)
              return fixInfo.title
            })()}</h4>
            <button 
              className="tooltip-close"
              onClick={() => setOpenTooltip(null)}
              aria-label="Close"
            >
              ×
            </button>
          </div>
          <div className="tooltip-body">
            <ol>
              {(() => {
                const issue = data.issues[openTooltip]
                const fixInfo = getFixInstructions(issue)
                return fixInfo.steps.map((step, stepIndex) => (
                  <li key={stepIndex}>{step}</li>
                ))
              })()}
            </ol>
          </div>
          <div className="tooltip-arrow"></div>
        </div>
      </div>,
      document.body
    )}
  </>
  )
  
  // Move the getFixInstructions function outside the map
  function getFixInstructions(issueText) {
    const text = issueText.toLowerCase()
    
    if (text.includes('title') && text.includes('missing')) {
      return {
        title: 'Add Page Title',
        steps: [
          'Add <title> tag to your HTML head section',
          'Keep it between 50-60 characters',
          'Include your main keyword',
          'Make it descriptive and compelling'
        ]
      }
    }
    
    if (text.includes('meta description') && text.includes('missing')) {
      return {
        title: 'Add Meta Description',
        steps: [
          'Add <meta name="description" content="..."> to head',
          'Keep it between 150-160 characters',
          'Include relevant keywords naturally',
          'Write compelling copy to improve click-through'
        ]
      }
    }
    
    if (text.includes('h1') && (text.includes('missing') || text.includes('multiple'))) {
      return {
        title: 'Fix H1 Structure',
        steps: [
          'Ensure exactly one <h1> tag per page',
          'Place it prominently near the top',
          'Include your main target keyword',
          'Make it descriptive of page content'
        ]
      }
    }
    
    if (text.includes('alt') && text.includes('missing')) {
      return {
        title: 'Add Alt Text to Images',
        steps: [
          'Add alt="description" to all <img> tags',
          'Describe the image content clearly',
          'Include keywords when relevant',
          'Keep descriptions concise but descriptive'
        ]
      }
    }
    
    if (text.includes('viewport') && text.includes('missing')) {
      return {
        title: 'Add Viewport Meta Tag',
        steps: [
          'Add to head: <meta name="viewport" content="width=device-width, initial-scale=1">',
          'Ensures proper mobile display',
          'Critical for mobile SEO ranking',
          'Test on various device sizes'
        ]
      }
    }
    
    if (text.includes('canonical') && text.includes('missing')) {
      return {
        title: 'Add Canonical URL',
        steps: [
          'Add <link rel="canonical" href="your-page-url"> to head',
          'Use absolute URLs',
          'Prevents duplicate content issues',
          'Helps search engines understand preferred URL'
        ]
      }
    }
    
    return {
      title: 'SEO Optimization',
      steps: [
        'Review the specific issue mentioned',
        'Check current HTML implementation',
        'Apply SEO best practices',
        'Test changes and monitor results'
      ]
    }
  }
}
