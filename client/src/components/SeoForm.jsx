import React, { useState, useRef } from 'react'
import { createPortal } from 'react-dom'
import ScoreBadge from './ScoreBadge.jsx'
import ResultCard from './ResultCard.jsx'

const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:5050';

export default function SeoForm({ user, token, requireAuth }) {
  const [url, setUrl] = useState('')
  const [loading, setLoading] = useState(false)
  const [data, setData] = useState(null)
  const [error, setError] = useState('')
  const [openTooltip, setOpenTooltip] = useState(null)
  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 })
  const [showDownloadOptions, setShowDownloadOptions] = useState(false)
  const [urlValid, setUrlValid] = useState(true)
  const buttonRefs = useRef({})

  // URL validation function
  const validateUrl = (input) => {
    if (!input.trim()) return true // Allow empty input
    try {
      const url = new URL(input.startsWith('http') ? input : `https://${input}`)
      return url.protocol === 'http:' || url.protocol === 'https:'
    } catch {
      return false
    }
  }

  // Handle URL input changes
  const handleUrlChange = (e) => {
    const value = e.target.value
    setUrl(value)
    setUrlValid(validateUrl(value))
  }

  const onSubmit = async (e) => {
    e.preventDefault()
    
    if (!requireAuth()) {
      return
    }
    
    // Normalize URL - add https:// if no protocol is present
    const normalizedUrl = url.startsWith('http') ? url : `https://${url}`
    
    setLoading(true); setError(''); setData(null)
    try {
      const headers = {
        'Authorization': `Bearer ${token}`
      }
      const res = await fetch(`${API_BASE}/api/analyze?url=` + encodeURIComponent(normalizedUrl), { headers })
      const json = await res.json()
      if (!res.ok) {
        if (res.status === 401) {
          setError('Please login to analyze websites')
          return
        }
        if (res.status === 429) {
          setError(json.message || 'Daily limit reached. Upgrade to Pro for unlimited access.')
          return
        }
        throw new Error(json.error || 'Failed')
      }
      setData(json)
    } catch (err) {
      setError(err.message || 'Request failed')
    } finally {
      setLoading(false)
    }
  }

  const handleFixClick = (index, e) => {
    e.stopPropagation()
    
    if (openTooltip === index) {
      setOpenTooltip(null)
    } else {
      const rect = e.currentTarget.getBoundingClientRect()
      const tooltipWidth = 320
      const tooltipHeight = 200
      
      // Position above and to the left of button
      let x = rect.right - tooltipWidth
      let y = rect.top - tooltipHeight - 12
      
      // Adjust if off screen
      if (y < 10) y = rect.bottom + 12
      if (x < 10) x = 10
      if (x + tooltipWidth > window.innerWidth - 10) {
        x = window.innerWidth - tooltipWidth - 10
      }
      
      setTooltipPosition({ x, y })
      setOpenTooltip(index)
    }
  }

  // Download SEO Report in different formats
  const downloadSEOReport = (data, url, format = 'txt') => {
    const timestamp = new Date().toLocaleString()
    const domain = new URL(url).hostname
    
    if (format === 'json') {
      downloadAsJSON(data, url, domain)
      return
    }
    
    if (format === 'csv') {
      downloadAsCSV(data, url, domain)
      return
    }
    
    // Default: Text format
    downloadAsText(data, url, domain, timestamp)
  }

  const downloadAsText = (data, url, domain, timestamp) => {
    const reportContent = `
SEO ANALYSIS REPORT
====================

Website: ${url}
Domain: ${domain}
Analysis Date: ${timestamp}
Generated by: Website Scanner

OVERALL SCORE
=============
SEO Score: ${data.score}/100
Status: ${data.status}
Response Time: ${data.ttfbMs} ms
Word Count: ${data.wordCount}

BASIC INFORMATION
=================
Title: ${data.metrics.title || 'Missing'}
Meta Description: ${data.metrics.metaDescription || 'Missing'}
Viewport Meta Tag: ${data.metrics.viewport || 'Missing'}
Language: ${data.metrics.lang || 'Missing'}
Canonical URL: ${data.metrics.canonical || 'Missing'}

CONTENT ANALYSIS
================
H1 Count: ${data.metrics.h1Count}
Total Images: ${data.metrics.imgCount}
Images Missing Alt Text: ${data.metrics.imgsMissingAlt}
JSON-LD Blocks: ${data.metrics.jsonLdCount}

SOCIAL MEDIA / SHARING
======================
Open Graph Title: ${data.metrics.og.title || 'Missing'}
Open Graph Description: ${data.metrics.og.description || 'Missing'}
Twitter Card: ${data.metrics.twitterCard || 'Missing'}

LINK ANALYSIS
=============
Total Links: ${data.metrics.linkTotals.total}
Internal Links: ${data.metrics.linkTotals.internal}
External Links: ${data.metrics.linkTotals.external}

${data.issues && data.issues.length > 0 ? `
PRIORITY FIXES
==============
${data.issues.map((issue, i) => `${i + 1}. ${issue}`).join('\n')}
` : 'No critical issues found.'}

RECOMMENDATIONS
===============
${getRecommendations(data)}

---
Report generated by Website Scanner
For more detailed analysis, visit: ${window.location.origin}
`

    // Create and download the file
    const blob = new Blob([reportContent], { type: 'text/plain' })
    const downloadUrl = window.URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = downloadUrl
    link.download = `seo-report-${domain}-${new Date().getTime()}.txt`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    window.URL.revokeObjectURL(downloadUrl)
  }

  const downloadAsJSON = (data, url, domain) => {
    const reportData = {
      website: url,
      domain: domain,
      analysisDate: new Date().toISOString(),
      generatedBy: 'Website Scanner',
      seoScore: data.score,
      status: data.status,
      responseTime: data.ttfbMs,
      wordCount: data.wordCount,
      metrics: {
        basic: {
          title: data.metrics.title,
          metaDescription: data.metrics.metaDescription,
          viewport: data.metrics.viewport,
          language: data.metrics.lang,
          canonical: data.metrics.canonical
        },
        content: {
          h1Count: data.metrics.h1Count,
          totalImages: data.metrics.imgCount,
          imagesMissingAlt: data.metrics.imgsMissingAlt,
          jsonLdBlocks: data.metrics.jsonLdCount
        },
        social: {
          ogTitle: data.metrics.og.title,
          ogDescription: data.metrics.og.description,
          twitterCard: data.metrics.twitterCard
        },
        links: {
          total: data.metrics.linkTotals.total,
          internal: data.metrics.linkTotals.internal,
          external: data.metrics.linkTotals.external
        }
      },
      issues: data.issues || [],
      recommendations: getRecommendationsArray(data)
    }

    const blob = new Blob([JSON.stringify(reportData, null, 2)], { type: 'application/json' })
    const downloadUrl = window.URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = downloadUrl
    link.download = `seo-report-${domain}-${new Date().getTime()}.json`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    window.URL.revokeObjectURL(downloadUrl)
  }

  const downloadAsCSV = (data, url, domain) => {
    const csvData = [
      ['Metric', 'Value'],
      ['Website', url],
      ['Domain', domain],
      ['Analysis Date', new Date().toLocaleString()],
      ['SEO Score', data.score],
      ['Status', data.status],
      ['Response Time (ms)', data.ttfbMs],
      ['Word Count', data.wordCount],
      ['', ''],
      ['BASIC INFORMATION', ''],
      ['Title', data.metrics.title || 'Missing'],
      ['Meta Description', data.metrics.metaDescription || 'Missing'],
      ['Viewport', data.metrics.viewport || 'Missing'],
      ['Language', data.metrics.lang || 'Missing'],
      ['Canonical URL', data.metrics.canonical || 'Missing'],
      ['', ''],
      ['CONTENT ANALYSIS', ''],
      ['H1 Count', data.metrics.h1Count],
      ['Total Images', data.metrics.imgCount],
      ['Images Missing Alt', data.metrics.imgsMissingAlt],
      ['JSON-LD Blocks', data.metrics.jsonLdCount],
      ['', ''],
      ['SOCIAL MEDIA', ''],
      ['OG Title', data.metrics.og.title || 'Missing'],
      ['OG Description', data.metrics.og.description || 'Missing'],
      ['Twitter Card', data.metrics.twitterCard || 'Missing'],
      ['', ''],
      ['LINKS', ''],
      ['Total Links', data.metrics.linkTotals.total],
      ['Internal Links', data.metrics.linkTotals.internal],
      ['External Links', data.metrics.linkTotals.external]
    ]

    if (data.issues && data.issues.length > 0) {
      csvData.push(['', ''])
      csvData.push(['ISSUES', ''])
      data.issues.forEach((issue, i) => {
        csvData.push([`Issue ${i + 1}`, issue])
      })
    }

    const csvContent = csvData.map(row => 
      row.map(cell => `"${String(cell).replace(/"/g, '""')}"`).join(',')
    ).join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv' })
    const downloadUrl = window.URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = downloadUrl
    link.download = `seo-report-${domain}-${new Date().getTime()}.csv`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    window.URL.revokeObjectURL(downloadUrl)
  }

  const getRecommendationsArray = (data) => {
    const recommendations = []
    
    if (!data.metrics.title) recommendations.push('Add a descriptive page title (50-60 characters)')
    if (!data.metrics.metaDescription) recommendations.push('Add a compelling meta description (150-160 characters)')
    if (data.metrics.h1Count === 0) recommendations.push('Add exactly one H1 heading to the page')
    else if (data.metrics.h1Count > 1) recommendations.push('Use only one H1 heading per page')
    if (data.metrics.imgsMissingAlt > 0) recommendations.push(`Add alt text to ${data.metrics.imgsMissingAlt} images`)
    if (!data.metrics.viewport) recommendations.push('Add viewport meta tag for mobile optimization')
    if (!data.metrics.canonical) recommendations.push('Add canonical URL to prevent duplicate content issues')
    if (!data.metrics.og.title) recommendations.push('Add Open Graph title for better social media sharing')
    if (!data.metrics.og.description) recommendations.push('Add Open Graph description for social media previews')
    if (data.metrics.jsonLdCount === 0) recommendations.push('Consider adding structured data (JSON-LD) for better search visibility')
    if (data.score < 70) {
      recommendations.push('Focus on addressing the priority fixes listed above')
      recommendations.push('Consider hiring an SEO professional for comprehensive optimization')
    }
    
    if (recommendations.length === 0) {
      recommendations.push('Great job! Your website follows most SEO best practices.')
      recommendations.push('Consider regular monitoring and testing for ongoing optimization.')
    }
    
    return recommendations
  }

  // Generate recommendations based on analysis
  const getRecommendations = (data) => {
    const recommendations = []
    
    if (!data.metrics.title) {
      recommendations.push('• Add a descriptive page title (50-60 characters)')
    }
    
    if (!data.metrics.metaDescription) {
      recommendations.push('• Add a compelling meta description (150-160 characters)')
    }
    
    if (data.metrics.h1Count === 0) {
      recommendations.push('• Add exactly one H1 heading to the page')
    } else if (data.metrics.h1Count > 1) {
      recommendations.push('• Use only one H1 heading per page')
    }
    
    if (data.metrics.imgsMissingAlt > 0) {
      recommendations.push(`• Add alt text to ${data.metrics.imgsMissingAlt} images`)
    }
    
    if (!data.metrics.viewport) {
      recommendations.push('• Add viewport meta tag for mobile optimization')
    }
    
    if (!data.metrics.canonical) {
      recommendations.push('• Add canonical URL to prevent duplicate content issues')
    }
    
    if (!data.metrics.og.title) {
      recommendations.push('• Add Open Graph title for better social media sharing')
    }
    
    if (!data.metrics.og.description) {
      recommendations.push('• Add Open Graph description for social media previews')
    }
    
    if (data.metrics.jsonLdCount === 0) {
      recommendations.push('• Consider adding structured data (JSON-LD) for better search visibility')
    }
    
    if (data.score < 70) {
      recommendations.push('• Focus on addressing the priority fixes listed above')
      recommendations.push('• Consider hiring an SEO professional for comprehensive optimization')
    }
    
    if (recommendations.length === 0) {
      return 'Great job! Your website follows most SEO best practices.\nConsider regular monitoring and testing for ongoing optimization.'
    }
    
    return recommendations.join('\n')
  }

  // Close tooltip when clicking outside or scrolling
  React.useEffect(() => {
    const handleClickOutside = (e) => {
      // Don't close if clicking inside the tooltip
      if (e.target.closest('.fix-tooltip-portal')) {
        return
      }
      setOpenTooltip(null)
    }
    
    const handleScroll = () => {
      setOpenTooltip(null)
    }
    
    const handleEscape = (e) => {
      if (e.key === 'Escape') {
        setOpenTooltip(null)
      }
    }
    
    if (openTooltip !== null) {
      // Add click outside listener
      setTimeout(() => {
        document.addEventListener('click', handleClickOutside)
      }, 0)
      
      // Add scroll listener
      window.addEventListener('scroll', handleScroll, true) // Use capture to catch all scrolls
      document.addEventListener('scroll', handleScroll, true)
      
      // Add escape key listener
      document.addEventListener('keydown', handleEscape)
      
      return () => {
        document.removeEventListener('click', handleClickOutside)
        window.removeEventListener('scroll', handleScroll, true)
        document.removeEventListener('scroll', handleScroll, true)
        document.removeEventListener('keydown', handleEscape)
      }
    }
  }, [openTooltip])

  // Close download dropdown when clicking outside
  React.useEffect(() => {
    const handleClickOutside = (e) => {
      if (!e.target.closest('.download-dropdown')) {
        setShowDownloadOptions(false)
      }
    }

    if (showDownloadOptions) {
      setTimeout(() => {
        document.addEventListener('click', handleClickOutside)
      }, 0)
      
      return () => document.removeEventListener('click', handleClickOutside)
    }
  }, [showDownloadOptions])

  return (
    <>
    <section className="seo-analyzer-v2">
      <div className="hero-section">
        <div className="hero-grid">
          <div className="hero-content">
            <div className="hero-badge">
              <span className="badge-icon">⚡</span>
              <span className="badge-text">SEO Analysis Tool</span>
            </div>
            <h1 className="hero-title">
              Optimize Your Website
              <span className="title-accent">Performance</span>
            </h1>
            <p className="hero-description">
              Get comprehensive SEO insights, technical analysis, and actionable recommendations to boost your search rankings.
            </p>
            
            <div className="analyzer-form-v3">
              <form onSubmit={onSubmit} className="search-form">
                <div className="search-container">
                  <div className={`search-box ${!urlValid ? 'invalid' : ''}`}>
                    <div className="search-icon">
                      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                        <circle cx="11" cy="11" r="8"/>
                        <path d="M21 21L16.65 16.65"/>
                      </svg>
                    </div>
                    <input 
                      value={url} 
                      onChange={handleUrlChange} 
                      placeholder="Enter Website URL" 
                      className={`search-input ${!urlValid ? 'invalid' : ''}`}
                      type="url"
                      required
                      autoComplete="url"
                    />
                    <div className="input-actions">
                      {url && (
                        <button 
                          type="button" 
                          className="clear-btn"
                          onClick={() => {
                            setUrl('')
                            setUrlValid(true)
                          }}
                          title="Clear"
                        >
                          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                            <line x1="18" y1="6" x2="6" y2="18"/>
                            <line x1="6" y1="6" x2="18" y2="18"/>
                          </svg>
                        </button>
                      )}
                      {url && urlValid && (
                        <div className="validation-check" title="Valid URL">
                          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2.5">
                            <polyline points="20,6 9,17 4,12"/>
                          </svg>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <button 
                    type="submit" 
                    disabled={loading || !url.trim() || !urlValid} 
                    className="analyze-button"
                  >
                    {loading ? (
                      <>
                        <div className="loading-spinner"></div>
                        <span>Analyzing...</span>
                      </>
                    ) : (
                      <>
                        <span>Analyze Website</span>
                        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                          <polyline points="9,18 15,12 9,6"/>
                        </svg>
                      </>
                    )}
                  </button>
                </div>
                
                <div className="search-suggestions">
                  <div className="suggestion-text">
                    {!urlValid && url ? (
                      <span className="error-hint">
                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                          <circle cx="12" cy="12" r="10"/>
                          <line x1="12" y1="8" x2="12" y2="12"/>
                          <line x1="12" y1="16" x2="12.01" y2="16"/>
                        </svg>
                        Please enter a valid URL format
                      </span>
                    ) : (
                      <span className="help-hint">
                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                          <circle cx="12" cy="12" r="10"/>
                          <path d="M9.09 9a3 3 0 015.83 1c0 2-3 3-3 3"/>
                          <line x1="12" y1="17" x2="12.01" y2="17"/>
                        </svg>
                        Try: example.com, https://mysite.com, or any website URL
                      </span>
                    )}
                  </div>
                  
                  <div className="quick-examples">
                    <span className="examples-label">Quick examples:</span>
                    <button 
                      type="button" 
                      className="example-btn"
                      onClick={() => {
                        setUrl('google.com')
                        setUrlValid(true)
                      }}
                    >
                      google.com
                    </button>
                    <button 
                      type="button" 
                      className="example-btn"
                      onClick={() => {
                        setUrl('github.com')
                        setUrlValid(true)
                      }}
                    >
                      github.com
                    </button>
                    <button 
                      type="button" 
                      className="example-btn"
                      onClick={() => {
                        setUrl('stackoverflow.com')
                        setUrlValid(true)
                      }}
                    >
                      stackoverflow.com
                    </button>
                  </div>
                </div>
              </form>
            </div>
          </div>
          
          <div className="hero-visual">
            <div className="floating-cards">
              <div className="float-card card-1">
                <div className="card-icon">📊</div>
                <div className="card-metric">95</div>
                <div className="card-label">SEO Score</div>
              </div>
              <div className="float-card card-2">
                <div className="card-icon">⚡</div>
                <div className="card-metric">1.2s</div>
                <div className="card-label">Load Time</div>
              </div>
              <div className="float-card card-3">
                <div className="card-icon">🎯</div>
                <div className="card-metric">12</div>
                <div className="card-label">Issues Fixed</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {error && (
        <div className="error-notification">
          <div className="error-header">
            <div className="error-icon-v2">⚠️</div>
            <h4>Analysis Failed</h4>
          </div>
          <p className="error-message">{error}</p>
        </div>
      )}
      {data && (
        <div className="results-v2">
          <div className="results-hero">
            <div className="results-header-v2">
              <div className="results-badge">
                <span className="badge-dot"></span>
                Analysis Complete
              </div>
              <h2 className="results-title">
                Website Analysis Results
                <span className="domain-highlight">{new URL(url).hostname}</span>
              </h2>
            </div>
            
            <div className="score-showcase">
              <div className="main-score">
                <ScoreBadge score={data.score} label="Overall SEO Score" />
              </div>
              
              <div className="metrics-row">
                <div className="metric-box">
                  <div className="metric-number">{data.status}</div>
                  <div className="metric-title">Status</div>
                </div>
                <div className="metric-box">
                  <div className="metric-number">{data.ttfbMs}ms</div>
                  <div className="metric-title">Response Time</div>
                </div>
                <div className="metric-box">
                  <div className="metric-number">{data.wordCount}</div>
                  <div className="metric-title">Word Count</div>
                </div>
              </div>
            </div>
            <div className="export-section">
              <button 
                className="export-btn"
                onClick={() => setShowDownloadOptions(!showDownloadOptions)}
                title="Export Report"
              >
                <span className="export-icon">⬇</span>
                Export Report
              </button>
              {showDownloadOptions && (
                <div className="export-menu">
                  <div className="export-option" onClick={() => {
                    downloadSEOReport(data, url, 'txt')
                    setShowDownloadOptions(false)
                  }}>
                    <div className="option-icon-v2">📄</div>
                    <div className="option-details">
                      <div className="option-name">Text Report</div>
                      <div className="option-format">.txt</div>
                    </div>
                  </div>
                  <div className="export-option" onClick={() => {
                    downloadSEOReport(data, url, 'json')
                    setShowDownloadOptions(false)
                  }}>
                    <div className="option-icon-v2">📊</div>
                    <div className="option-details">
                      <div className="option-name">JSON Data</div>
                      <div className="option-format">.json</div>
                    </div>
                  </div>
                  <div className="export-option" onClick={() => {
                    downloadSEOReport(data, url, 'csv')
                    setShowDownloadOptions(false)
                  }}>
                    <div className="option-icon-v2">📈</div>
                    <div className="option-details">
                      <div className="option-name">CSV Export</div>
                      <div className="option-format">.csv</div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
          
          <div className="content-sections">
            <div className="section-v2">
              <div className="section-header-v2">
                <div className="section-number">01</div>
                <div className="section-title-group">
                  <h3 className="section-title">Core SEO Analysis</h3>
                  <p className="section-subtitle">Fundamental elements affecting search visibility</p>
                </div>
              </div>
              <div className="cards-grid">
            <ResultCard title="Basics" items={[
              ['Title', data.metrics.title || '—'],
              ['Meta Description', data.metrics.metaDescription || '—'],
              ['Viewport', data.metrics.viewport || '—'],
              ['Language', data.metrics.lang || '—'],
              ['Canonical URL', data.metrics.canonical || '—'],
            ]} />

            <ResultCard title="Content Structure" items={[
              ['H1 Count', String(data.metrics.h1Count)],
              ['Header Hierarchy', data.metrics.headerHierarchy?.isGood ? 'Good' : data.metrics.headerHierarchy?.issue || 'Issues'],
              ['Word Count', String(data.wordCount)],
              ['Images Total', String(data.metrics.imgCount)],
              ['Images Missing Alt', String(data.metrics.imgsMissingAlt)],
            ]} />

            <ResultCard title="Keywords & SEO" items={[
              ['Keywords in Title', data.metrics.keywordAnalysis?.titleHasKeywords ? 'Yes' : 'No'],
              ['Keywords in Description', data.metrics.keywordAnalysis?.descriptionHasKeywords ? 'Yes' : 'No'],
              ['JSON-LD Structured Data', String(data.metrics.jsonLdCount)],
              ['Robots Meta', data.metrics.robotsMeta || '—'],
            ]} />

            <ResultCard title="Technical SEO" items={[
              ['HTTPS', data.metrics.technical?.https ? 'Yes' : 'No'],
              ['Broken Links', `${data.metrics.technical?.brokenLinks?.brokenCount || 0} broken link${(data.metrics.technical?.brokenLinks?.brokenCount || 0) === 1 ? '' : 's'}`],
            ]} brokenLinks={data.metrics.technical?.brokenLinks?.brokenLinks || []} />

            <ResultCard title="Social & Sharing" items={[
              ['OG Title', data.metrics.og.title || '—'],
              ['OG Description', data.metrics.og.description || '—'],
              ['Twitter Card', data.metrics.twitterCard || '—'],
              ['Social Media Links', `${data.metrics.socialLinks?.count || 0} platforms`],
            ]} />

            <ResultCard title="Links & Navigation" items={[
              ['Total Links', String(data.metrics.linkTotals.total)],
              ['Internal Links', String(data.metrics.linkTotals.internal)],
              ['External Links', String(data.metrics.linkTotals.external)],
              ['Image Optimization', data.metrics.imageAnalysis?.optimized ? 'Good' : 'Needs Work'],
            ]} />
              </div>
            </div>

            {/* Pro-tier Advanced Metrics */}
            {user?.tier === 'pro' && (
              <div className="section-v2 pro-section-v2">
                <div className="section-header-v2">
                  <div className="section-number pro-number">02</div>
                  <div className="section-title-group">
                    <h3 className="section-title">
                      Advanced Pro Analysis
                      <span className="pro-badge-v2">PRO</span>
                    </h3>
                    <p className="section-subtitle">Deep technical insights for professional optimization</p>
                  </div>
                </div>
                
                <div className="cards-grid pro-grid">
                <ResultCard
                  title="Meta Information"
                  items={[
                    ['Completeness Score', `${data.metrics?.metaInformation?.score || 0}/100`],
                    ['Meta Robots', data.metrics?.metaInformation?.robotsMeta || '—'],
                    ['Meta Keywords', data.metrics?.metaInformation?.keywords || '—'],
                    ['Meta Author', data.metrics?.metaInformation?.author || '—'],
                    ['Dublin Core', data.metrics?.metaInformation?.dublinCore ? 'Present' : 'Missing'],
                  ]}
                />
                
                <ResultCard
                  title="Schema Markup"
                  items={[
                    ['Schema Score', `${data.metrics?.schemaMarkup?.score || 0}/100`],
                    ['Structured Data Count', data.metrics?.schemaMarkup?.count || 0],
                    ['JSON-LD Scripts', data.metrics?.schemaMarkup?.jsonLdCount || 0],
                    ['Microdata Elements', data.metrics?.schemaMarkup?.microdataCount || 0],
                    ['Schema Types', (data.metrics?.schemaMarkup?.types || []).join(', ') || '—'],
                  ]}
                />
                
                <ResultCard
                  title="Server Configuration"
                  items={[
                    ['Config Score', `${data.metrics?.serverConfiguration?.score || 0}/100`],
                    ['Security Headers', data.metrics?.serverConfiguration?.securityHeaders || 0],
                    ['Compression', data.metrics?.serverConfiguration?.compression ? 'Enabled' : 'Disabled'],
                    ['Caching Headers', data.metrics?.serverConfiguration?.caching ? 'Present' : 'Missing'],
                    ['Server Response', data.metrics?.serverConfiguration?.serverHeader || '—'],
                  ]}
                />
                
                <ResultCard
                  title="Accessibility"
                  items={[
                    ['Accessibility Score', `${data.metrics?.accessibility?.score || 0}/100`],
                    ['Alt Text Coverage', `${data.metrics?.accessibility?.altTextCoverage || 0}%`],
                    ['Heading Structure', data.metrics?.accessibility?.headingStructure ? 'Good' : 'Needs Work'],
                    ['Color Contrast', data.metrics?.accessibility?.colorContrast ? 'Good' : 'Check Needed'],
                    ['Focus Management', data.metrics?.accessibility?.focusManagement ? 'Present' : 'Missing'],
                  ]}
                />
                
                <ResultCard
                  title="Content Quality"
                  items={[
                    ['Content Score', `${data.metrics?.contentQuality?.score || 0}/100`],
                    ['Word Count', data.metrics?.contentQuality?.wordCount || 0],
                    ['Reading Level', data.metrics?.contentQuality?.readingLevel || '—'],
                    ['Paragraph Count', data.metrics?.contentQuality?.paragraphCount || 0],
                    ['Content Structure', data.metrics?.contentQuality?.hasGoodStructure ? 'Good' : 'Needs Work'],
                  ]}
                />
                
                <ResultCard
                  title="Advanced Images"
                  items={[
                    ['Image Score', `${data.metrics?.advancedImages?.score || 0}/100`],
                    ['Lazy Loading', data.metrics?.advancedImages?.lazyLoading ? 'Implemented' : 'Missing'],
                    ['Modern Formats', `${data.metrics?.advancedImages?.modernFormats || 0}%`],
                    ['Responsive Images', data.metrics?.advancedImages?.responsiveImages ? 'Present' : 'Missing'],
                    ['Image Compression', data.metrics?.advancedImages?.compression || '—'],
                  ]}
                />
                
                <ResultCard
                  title="Mobile Friendly"
                  items={[
                    ['Mobile Score', `${data.metrics?.mobileFriendly?.score || 0}/100`],
                    ['Responsive Design', data.metrics?.mobileFriendly?.responsive ? 'Yes' : 'No'],
                    ['Touch Targets', data.metrics?.mobileFriendly?.touchTargets ? 'Adequate' : 'Too Small'],
                    ['Mobile Speed', data.metrics?.mobileFriendly?.speed || '—'],
                    ['Viewport Config', data.metrics?.mobileFriendly?.viewportConfig ? 'Correct' : 'Missing'],
                  ]}
                />
                
                <ResultCard
                  title="Security Analysis"
                  items={[
                    ['Security Score', `${data.metrics?.security?.score || 0}/100`],
                    ['HTTPS Enforced', data.metrics?.security?.httpsEnforced ? 'Yes' : 'No'],
                    ['CSP Header', data.metrics?.security?.csp ? 'Present' : 'Missing'],
                    ['HSTS', data.metrics?.security?.hsts ? 'Enabled' : 'Disabled'],
                    ['Security Vulnerabilities', data.metrics?.security?.vulnerabilities || 0],
                  ]}
                />
                </div>
              </div>
            )}

            {/* Tiered Priority Fixes */}
            {((data.freeIssues?.length > 0) || (data.proIssues?.length > 0)) && (
              <div className="section-v2 fixes-section-v2">
                <div className="section-header-v2">
                  <div className="section-number fixes-number">03</div>
                  <div className="section-title-group">
                    <h3 className="section-title">
                      Priority Action Items
                      <div className="issues-count">
                        {(data.freeIssues?.length || 0) + (data.proIssues?.length || 0)} Issues
                      </div>
                    </h3>
                    <p className="section-subtitle">Critical optimizations to boost your SEO performance</p>
                  </div>
                </div>
                
                <div className="fixes-container">
              
              <div className="fixes-list">
                {/* Free tier issues - always visible */}
                {data.freeIssues?.map((issue, i) => (
                  <div key={`free-${i}`} className="fix-item">
                    <div className="fix-priority">
                      <span className="priority-number">{i + 1}</span>
                    </div>
                    <div className="fix-content">
                      <div className="fix-text">{issue}</div>
                      <div className="fix-impact">High Impact</div>
                    </div>
                    <div className="fix-action">
                      <button 
                        className="fix-btn" 
                        onClick={(e) => handleFixClick(i, e)}
                        ref={el => buttonRefs.current[i] = el}
                      >
                        Fix
                      </button>
                    </div>
                  </div>
                ))}
                
                {/* Pro tier issues - blurred for free users */}
                {data.proIssues?.map((issue, i) => {
                  const shouldShowUpgradeCard = user?.tier !== 'pro' && i === Math.floor(data.proIssues.length / 2);
                  return (
                    <React.Fragment key={`pro-${i}`}>
                      <div className={`fix-item ${user?.tier !== 'pro' ? 'pro-blurred' : ''}`}>
                        <div className="fix-priority">
                          <span className="priority-number">{(data.freeIssues?.length || 0) + i + 1}</span>
                        </div>
                        <div className="fix-content">
                          <div className="fix-text">{issue}</div>
                          <div className="fix-impact">Advanced</div>
                        </div>
                        <div className="fix-action">
                          {user?.tier === 'pro' ? (
                            <button 
                              className="fix-btn" 
                              onClick={(e) => handleFixClick((data.freeIssues?.length || 0) + i, e)}
                              ref={el => buttonRefs.current[(data.freeIssues?.length || 0) + i] = el}
                            >
                              Fix
                            </button>
                          ) : (
                            <button className="fix-btn pro-locked" disabled>
                              Pro
                            </button>
                          )}
                        </div>
                      </div>
                      
                      {/* Show upgrade prompt in the middle of pro issues for free users */}
                      {shouldShowUpgradeCard && (
                        <div className="upgrade-prompt-card">
                          <div className="upgrade-icon">🚀</div>
                          <div className="upgrade-content">
                            <h4>Unlock {data.proIssues.length} Advanced Fixes</h4>
                            <p>Get detailed insights on accessibility, security, content quality, and more with Pro.</p>
                            <button className="upgrade-btn" disabled>
                              Upgrade to Pro
                            </button>
                          </div>
                        </div>
                      )}
                    </React.Fragment>
                  );
                })}
                </div>
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </section>
    {/* Tooltip Portal */}
    {openTooltip !== null && data?.issues && createPortal(
      <div 
        className="fix-tooltip-portal"
        style={{
          position: 'fixed',
          top: tooltipPosition.y,
          left: tooltipPosition.x,
          zIndex: 10000
        }}
        onClick={(e) => e.stopPropagation()}
      >
        <div className="fix-tooltip-content">
          <div className="tooltip-header">
            <span className="tooltip-icon">💡</span>
            <h4>{(() => {
              const issue = data.issues[openTooltip]
              const fixInfo = getFixInstructions(issue)
              return fixInfo.title
            })()}</h4>
            <button 
              className="tooltip-close"
              onClick={() => setOpenTooltip(null)}
              aria-label="Close"
            >
              ×
            </button>
          </div>
          <div className="tooltip-body">
            <ol>
              {(() => {
                const issue = data.issues[openTooltip]
                const fixInfo = getFixInstructions(issue)
                return fixInfo.steps.map((step, stepIndex) => (
                  <li key={stepIndex}>{step}</li>
                ))
              })()}
            </ol>
          </div>
          <div className="tooltip-arrow"></div>
        </div>
      </div>,
      document.body
    )}
  </>
  )
  
  // Move the getFixInstructions function outside the map
  function getFixInstructions(issueText) {
    const text = issueText.toLowerCase()
    
    if (text.includes('title') && text.includes('missing')) {
      return {
        title: 'Add Page Title',
        steps: [
          'Add <title> tag to your HTML head section',
          'Keep it between 50-60 characters',
          'Include your main keyword',
          'Make it descriptive and compelling'
        ]
      }
    }
    
    if (text.includes('meta description') && text.includes('missing')) {
      return {
        title: 'Add Meta Description',
        steps: [
          'Add <meta name="description" content="..."> to head',
          'Keep it between 150-160 characters',
          'Include relevant keywords naturally',
          'Write compelling copy to improve click-through'
        ]
      }
    }
    
    if (text.includes('h1') && (text.includes('missing') || text.includes('multiple'))) {
      return {
        title: 'Fix H1 Structure',
        steps: [
          'Ensure exactly one <h1> tag per page',
          'Place it prominently near the top',
          'Include your main target keyword',
          'Make it descriptive of page content'
        ]
      }
    }
    
    if (text.includes('alt') && text.includes('missing')) {
      return {
        title: 'Add Alt Text to Images',
        steps: [
          'Add alt="description" to all <img> tags',
          'Describe the image content clearly',
          'Include keywords when relevant',
          'Keep descriptions concise but descriptive'
        ]
      }
    }
    
    if (text.includes('viewport') && text.includes('missing')) {
      return {
        title: 'Add Viewport Meta Tag',
        steps: [
          'Add to head: <meta name="viewport" content="width=device-width, initial-scale=1">',
          'Ensures proper mobile display',
          'Critical for mobile SEO ranking',
          'Test on various device sizes'
        ]
      }
    }
    
    if (text.includes('canonical') && text.includes('missing')) {
      return {
        title: 'Add Canonical URL',
        steps: [
          'Add <link rel="canonical" href="your-page-url"> to head',
          'Use absolute URLs',
          'Prevents duplicate content issues',
          'Helps search engines understand preferred URL'
        ]
      }
    }
    
    return {
      title: 'SEO Optimization',
      steps: [
        'Review the specific issue mentioned',
        'Check current HTML implementation',
        'Apply SEO best practices',
        'Test changes and monitor results'
      ]
    }
  }
}
